// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum TransactionType {
  INTERWALLET
  EXTERNAL       //would be used for in  outgoing/incoming external transfers
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Currency {
  USD
  RWF
  PESO
}

model User {
  id              String     @id @default(uuid())
  firstName       String
  lastName        String
  nationalIdNo    String
  email           String     @unique
  password        String
  isEmailVerified Boolean    @default(false)
  status          UserStatus @default(ACTIVE)
  dateOfBirth     DateTime   @db.Date
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  Wallet          Wallet[]

  @@map("users")
}

model Wallet {
  id                   String        @id @default(uuid())
  userId               String
  currency             Currency
  balance              Decimal       @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  user                 User          @relation(fields: [userId], references: [id])
  sentTransactions     Transaction[] @relation("SenderWallet")
  receivedTransactions Transaction[] @relation("ReceiverWallet")

  @@unique([userId, currency])
  @@map("wallets")
}

model Transaction {
  id               String            @id @default(uuid())
  type             TransactionType
  amount           Decimal
  currency         Currency
  otp              String?
  otpExpiresAt     DateTime?
  refNumber        String
  userId           String
  senderWalletId   String
  receiverWalletId String
  status           TransactionStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  senderWallet     Wallet            @relation("SenderWallet", fields: [senderWalletId], references: [id])
  receiverWallet   Wallet            @relation("ReceiverWallet", fields: [receiverWalletId], references: [id])

  @@map("transactions")
}
